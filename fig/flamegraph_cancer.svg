<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="566.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="549" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="549" > </text>
<g id="frames">
<g >
<title>std::_Vector_base&lt;float, std::allocator&lt;float&gt; &gt;::_Vector_base (10,101,010 samples, 0.02%)</title><rect x="19.7" y="357" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="22.73" y="367.5" ></text>
</g>
<g >
<title>bernoulli_distribution_custom&lt;float&gt;::operator (40,404,040 samples, 0.07%)</title><rect x="1156.6" y="373" width="0.8" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1159.63" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::push_back (10,101,010 samples, 0.02%)</title><rect x="1159.4" y="341" width="0.2" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1162.41" y="351.5" ></text>
</g>
<g >
<title>std::partial_sum&lt;__gnu_cxx::__normal_iterator&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt; &gt; (30,303,030 samples, 0.05%)</title><rect x="18.9" y="373" width="0.6" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="21.94" y="383.5" ></text>
</g>
<g >
<title>__fdimf (40,404,040 samples, 0.07%)</title><rect x="228.1" y="341" width="0.8" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="231.12" y="351.5" ></text>
</g>
<g >
<title>philox_skip (10,101,010 samples, 0.02%)</title><rect x="23.5" y="309" width="0.2" height="15.0" fill="rgb(250,209,49)" rx="2" ry="2" />
<text  x="26.51" y="319.5" ></text>
</g>
<g >
<title>genetic::cpp_evolve (59,838,383,240 samples, 99.73%)</title><rect x="11.2" y="421" width="1176.8" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="14.19" y="431.5" >genetic::cpp_evolve</text>
</g>
<g >
<title>std::stack&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::push (101,010,100 samples, 0.17%)</title><rect x="13.2" y="373" width="2.0" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="16.18" y="383.5" ></text>
</g>
<g >
<title>std::copy&lt;genetic::node*, genetic::node*&gt; (10,101,010 samples, 0.02%)</title><rect x="1188.8" y="277" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1191.81" y="287.5" ></text>
</g>
<g >
<title>do_anonymous_page (70,707,070 samples, 0.12%)</title><rect x="100.6" y="101" width="1.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="103.59" y="111.5" ></text>
</g>
<g >
<title>unmap_single_vma (40,404,040 samples, 0.07%)</title><rect x="10.2" y="325" width="0.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="13.20" y="335.5" ></text>
</g>
<g >
<title>release_pages (10,101,010 samples, 0.02%)</title><rect x="10.8" y="229" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="13.79" y="239.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt;, float, __gnu_cxx::__ops::_Iter_less_val&gt; (30,303,030 samples, 0.05%)</title><rect x="18.1" y="357" width="0.6" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="21.14" y="367.5" ></text>
</g>
<g >
<title>philox_random_uint32 (10,101,010 samples, 0.02%)</title><rect x="23.5" y="341" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="26.51" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_create_nodes (10,101,010 samples, 0.02%)</title><rect x="15.6" y="309" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="18.56" y="319.5" ></text>
</g>
<g >
<title>std::lower_bound&lt;__gnu_cxx::__normal_iterator&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt;, float&gt; (40,404,040 samples, 0.07%)</title><rect x="18.1" y="373" width="0.8" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="21.14" y="383.5" ></text>
</g>
<g >
<title>PhiloxEngine::operator (50,505,050 samples, 0.08%)</title><rect x="1158.0" y="357" width="1.0" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1161.02" y="367.5" ></text>
</g>
<g >
<title>uniform_real_distribution_custom&lt;float&gt;::operator (121,212,120 samples, 0.20%)</title><rect x="20.3" y="373" width="2.4" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="23.33" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;int, std::allocator&lt;int&gt; &gt;::_Deque_base (20,202,020 samples, 0.03%)</title><rect x="15.6" y="341" width="0.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="18.56" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::construct&lt;int, int&gt; (10,101,010 samples, 0.02%)</title><rect x="14.4" y="325" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="17.37" y="335.5" ></text>
</g>
<g >
<title>std::stack&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::~stack (30,303,030 samples, 0.05%)</title><rect x="16.4" y="373" width="0.6" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="19.36" y="383.5" ></text>
</g>
<g >
<title>get_page_from_freelist (40,404,040 samples, 0.07%)</title><rect x="100.8" y="53" width="0.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="103.78" y="63.5" ></text>
</g>
<g >
<title>genetic::hoist_mutation (20,202,020 samples, 0.03%)</title><rect x="23.3" y="405" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="26.31" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_initialize_map (20,202,020 samples, 0.03%)</title><rect x="15.6" y="325" width="0.4" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="18.56" y="335.5" ></text>
</g>
<g >
<title>__mod_lruvec_state (10,101,010 samples, 0.02%)</title><rect x="1156.2" y="85" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1159.23" y="95.5" ></text>
</g>
<g >
<title>std::allocator&lt;int*&gt;::~allocator (10,101,010 samples, 0.02%)</title><rect x="16.6" y="309" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="19.56" y="319.5" ></text>
</g>
<g >
<title>irqentry_exit (10,101,010 samples, 0.02%)</title><rect x="122.6" y="309" width="0.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="125.64" y="319.5" ></text>
</g>
<g >
<title>genetic::detail::is_terminal (10,101,010 samples, 0.02%)</title><rect x="12.2" y="341" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="15.19" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::deque (20,202,020 samples, 0.03%)</title><rect x="15.6" y="357" width="0.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="18.56" y="367.5" ></text>
</g>
<g >
<title>philox_oneround (50,505,050 samples, 0.08%)</title><rect x="21.3" y="309" width="1.0" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="24.32" y="319.5" ></text>
</g>
<g >
<title>philox_skip (20,202,020 samples, 0.03%)</title><rect x="1186.2" y="341" width="0.4" height="15.0" fill="rgb(250,209,49)" rx="2" ry="2" />
<text  x="1189.23" y="351.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;float*, unsigned long&gt; (383,838,380 samples, 0.64%)</title><rect x="94.8" y="277" width="7.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="97.82" y="287.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (10,101,010 samples, 0.02%)</title><rect x="10.0" y="325" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;float, std::allocator&lt;float&gt; &gt;::_Vector_impl::_Vector_impl (10,101,010 samples, 0.02%)</title><rect x="23.3" y="341" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="26.31" y="351.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;float*, unsigned long&gt; (383,838,380 samples, 0.64%)</title><rect x="94.8" y="293" width="7.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="97.82" y="303.5" ></text>
</g>
<g >
<title>exc_page_fault (111,111,110 samples, 0.19%)</title><rect x="1154.2" y="213" width="2.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1157.24" y="223.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;float*, float&gt; (383,838,380 samples, 0.64%)</title><rect x="94.8" y="229" width="7.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="97.82" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::~deque (30,303,030 samples, 0.05%)</title><rect x="16.4" y="357" width="0.6" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="19.36" y="367.5" ></text>
</g>
<g >
<title>genetic::stack&lt;float, 20&gt;::stack (30,303,030 samples, 0.05%)</title><rect x="1148.3" y="357" width="0.6" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1151.28" y="367.5" ></text>
</g>
<g >
<title>std::advance&lt;__gnu_cxx::__normal_iterator&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt;, long&gt; (10,101,010 samples, 0.02%)</title><rect x="18.5" y="341" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="21.54" y="351.5" ></text>
</g>
<g >
<title>genetic::detail::is_terminal (10,101,010 samples, 0.02%)</title><rect x="17.7" y="357" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="20.75" y="367.5" ></text>
</g>
<g >
<title>__alloc_pages (60,606,060 samples, 0.10%)</title><rect x="1155.0" y="101" width="1.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1158.04" y="111.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::pop_back (40,404,040 samples, 0.07%)</title><rect x="12.4" y="357" width="0.8" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="15.38" y="367.5" ></text>
</g>
<g >
<title>philox_raisekey (30,303,030 samples, 0.05%)</title><rect x="1185.6" y="341" width="0.6" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1188.63" y="351.5" ></text>
</g>
<g >
<title>genetic::symFit (59,888,888,290 samples, 99.81%)</title><rect x="11.2" y="437" width="1177.8" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="14.19" y="447.5" >genetic::symFit</text>
</g>
<g >
<title>[genetic_benchmark] (40,404,040 samples, 0.07%)</title><rect x="23.7" y="357" width="0.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="26.71" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_fill_n&lt;true&gt;::__uninit_fill_n&lt;float*, unsigned long, float&gt; (10,101,010 samples, 0.02%)</title><rect x="19.9" y="309" width="0.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="22.93" y="319.5" ></text>
</g>
<g >
<title>philox_oneround (595,959,590 samples, 0.99%)</title><rect x="1170.1" y="325" width="11.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1173.13" y="335.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;genetic::program const*, std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;genetic::program*, std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt; &gt; &gt; (30,303,030 samples, 0.05%)</title><rect x="1188.0" y="405" width="0.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1191.01" y="415.5" ></text>
</g>
<g >
<title>philox_random_uint32 (60,606,060 samples, 0.10%)</title><rect x="1186.8" y="373" width="1.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1189.82" y="383.5" ></text>
</g>
<g >
<title>__alloc_pages (40,404,040 samples, 0.07%)</title><rect x="100.8" y="69" width="0.8" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="103.78" y="79.5" ></text>
</g>
<g >
<title>genetic::crossover (50,505,050 samples, 0.08%)</title><rect x="1159.0" y="389" width="1.0" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1162.01" y="399.5" ></text>
</g>
<g >
<title>genetic::node::node (10,101,010 samples, 0.02%)</title><rect x="1188.0" y="309" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1191.01" y="319.5" ></text>
</g>
<g >
<title>std::__fill_a1&lt;float*, float&gt; (383,838,380 samples, 0.64%)</title><rect x="94.8" y="213" width="7.6" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="97.82" y="223.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, genetic::node*, genetic::node*&gt; (20,202,020 samples, 0.03%)</title><rect x="1188.2" y="293" width="0.4" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="1191.21" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (10,101,010 samples, 0.02%)</title><rect x="1189.0" y="453" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1192.01" y="463.5" ></text>
</g>
<g >
<title>__pagevec_lru_add (10,101,010 samples, 0.02%)</title><rect x="101.6" y="53" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="104.58" y="63.5" ></text>
</g>
<g >
<title>__expf_fma (303,030,300 samples, 0.51%)</title><rect x="24.5" y="357" width="6.0" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="27.50" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;float&gt; &gt;::deallocate (10,101,010 samples, 0.02%)</title><rect x="20.1" y="325" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="23.13" y="335.5" ></text>
</g>
<g >
<title>rmqueue (10,101,010 samples, 0.02%)</title><rect x="1156.0" y="69" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1159.03" y="79.5" ></text>
</g>
<g >
<title>genetic::detail::arity (101,010,100 samples, 0.17%)</title><rect x="103.6" y="357" width="2.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="106.57" y="367.5" ></text>
</g>
<g >
<title>x64_sys_call (10,101,010 samples, 0.02%)</title><rect x="1189.0" y="437" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1192.01" y="447.5" ></text>
</g>
<g >
<title>std::stack&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::top (20,202,020 samples, 0.03%)</title><rect x="16.0" y="373" width="0.4" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="18.96" y="383.5" ></text>
</g>
<g >
<title>free_pcp_prepare (10,101,010 samples, 0.02%)</title><rect x="1189.0" y="293" width="0.2" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="1192.01" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::end (10,101,010 samples, 0.02%)</title><rect x="14.6" y="309" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="17.57" y="319.5" ></text>
</g>
<g >
<title>genetic::execute_kernel&lt;20&gt; (51,505,049,990 samples, 85.84%)</title><rect x="122.8" y="357" width="1013.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="125.84" y="367.5" >genetic::execute_kernel&lt;20&gt;</text>
</g>
<g >
<title>__w_log1pf (50,505,050 samples, 0.08%)</title><rect x="65.6" y="357" width="1.0" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="68.62" y="367.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (10,101,010 samples, 0.02%)</title><rect x="1154.8" y="117" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1157.84" y="127.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;float, std::allocator&lt;float&gt; &gt;::_Vector_base (10,101,010 samples, 0.02%)</title><rect x="23.3" y="357" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="26.31" y="367.5" ></text>
</g>
<g >
<title>std::operator- (20,202,020 samples, 0.03%)</title><rect x="15.2" y="341" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="18.16" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::operator[] (60,606,060 samples, 0.10%)</title><rect x="102.4" y="357" width="1.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="105.37" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt; (10,101,010 samples, 0.02%)</title><rect x="1159.8" y="341" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1162.80" y="351.5" ></text>
</g>
<g >
<title>PhiloxEngine::operator (10,101,010 samples, 0.02%)</title><rect x="1156.4" y="357" width="0.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1159.43" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::_S_buffer_size (20,202,020 samples, 0.03%)</title><rect x="15.2" y="325" width="0.4" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="18.16" y="335.5" ></text>
</g>
<g >
<title>unmap_region (10,101,010 samples, 0.02%)</title><rect x="1189.0" y="373" width="0.2" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1192.01" y="383.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;float*, float&gt; (383,838,380 samples, 0.64%)</title><rect x="1148.9" y="261" width="7.5" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1151.88" y="271.5" ></text>
</g>
<g >
<title>PhiloxEngine::operator (60,606,060 samples, 0.10%)</title><rect x="1186.8" y="389" width="1.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1189.82" y="399.5" ></text>
</g>
<g >
<title>_int_free (10,101,010 samples, 0.02%)</title><rect x="11.0" y="469" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="13.99" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::_M_set_node (10,101,010 samples, 0.02%)</title><rect x="15.8" y="309" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="18.76" y="319.5" ></text>
</g>
<g >
<title>std::uninitialized_fill_n&lt;float*, unsigned long, float&gt; (10,101,010 samples, 0.02%)</title><rect x="19.9" y="325" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="22.93" y="335.5" ></text>
</g>
<g >
<title>philox_oneround (20,202,020 samples, 0.03%)</title><rect x="1185.2" y="341" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1188.23" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_default_initialize (383,838,380 samples, 0.64%)</title><rect x="1148.9" y="357" width="7.5" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1151.88" y="367.5" ></text>
</g>
<g >
<title>philox_next4 (40,404,040 samples, 0.07%)</title><rect x="1156.6" y="325" width="0.8" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1159.63" y="335.5" ></text>
</g>
<g >
<title>genetic::detail::evaluate_node (353,535,350 samples, 0.59%)</title><rect x="105.6" y="357" width="6.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="108.55" y="367.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (20,202,020 samples, 0.03%)</title><rect x="14.8" y="357" width="0.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="17.77" y="367.5" ></text>
</g>
<g >
<title>unmap_region (50,505,050 samples, 0.08%)</title><rect x="10.0" y="357" width="1.0" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>genetic::node::is_nonterminal (10,101,010 samples, 0.02%)</title><rect x="17.7" y="373" width="0.2" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="20.75" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt;::operator= (30,303,030 samples, 0.05%)</title><rect x="1188.0" y="421" width="0.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1191.01" y="431.5" ></text>
</g>
<g >
<title>__mod_memcg_lruvec_state (10,101,010 samples, 0.02%)</title><rect x="1156.2" y="69" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1159.23" y="79.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::push_back (10,101,010 samples, 0.02%)</title><rect x="1157.6" y="357" width="0.2" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1160.62" y="367.5" ></text>
</g>
<g >
<title>genetic::stack&lt;float, 20&gt;::stack (4,181,818,140 samples, 6.97%)</title><rect x="1053.5" y="341" width="82.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1056.53" y="351.5" >genetic::..</text>
</g>
<g >
<title>__cosf_fma (1,282,828,270 samples, 2.14%)</title><rect x="202.9" y="341" width="25.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="205.89" y="351.5" >_..</text>
</g>
<g >
<title>std::__advance&lt;__gnu_cxx::__normal_iterator&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt;, long&gt; (10,101,010 samples, 0.02%)</title><rect x="18.3" y="341" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="21.34" y="351.5" ></text>
</g>
<g >
<title>sysvec_reschedule_ipi (10,101,010 samples, 0.02%)</title><rect x="122.6" y="325" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="125.64" y="335.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, genetic::node*, genetic::node*&gt; (20,202,020 samples, 0.03%)</title><rect x="22.7" y="341" width="0.4" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="25.71" y="351.5" ></text>
</g>
<g >
<title>all (59,999,999,400 samples, 100%)</title><rect x="10.0" y="517" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>exit_to_user_mode_loop (10,101,010 samples, 0.02%)</title><rect x="122.6" y="261" width="0.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="125.64" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate_map (10,101,010 samples, 0.02%)</title><rect x="16.6" y="325" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="19.56" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt; &gt;::construct&lt;std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt;, std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt; const&amp;&gt; (20,202,020 samples, 0.03%)</title><rect x="1188.6" y="389" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1191.61" y="399.5" ></text>
</g>
<g >
<title>__mod_node_page_state (10,101,010 samples, 0.02%)</title><rect x="10.6" y="229" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="13.60" y="239.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (10,101,010 samples, 0.02%)</title><rect x="15.6" y="277" width="0.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="18.56" y="287.5" ></text>
</g>
<g >
<title>asm_sysvec_reschedule_ipi (10,101,010 samples, 0.02%)</title><rect x="122.6" y="341" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="125.64" y="351.5" ></text>
</g>
<g >
<title>zap_pte_range (40,404,040 samples, 0.07%)</title><rect x="10.2" y="277" width="0.8" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="13.20" y="287.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.02%)</title><rect x="1189.8" y="485" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1192.80" y="495.5" ></text>
</g>
<g >
<title>cgroup_rstat_updated (10,101,010 samples, 0.02%)</title><rect x="1156.2" y="53" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1159.23" y="63.5" ></text>
</g>
<g >
<title>__log1pf (1,787,878,770 samples, 2.98%)</title><rect x="30.5" y="357" width="35.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="33.46" y="367.5" >__..</text>
</g>
<g >
<title>std::partial_sum&lt;__gnu_cxx::__normal_iterator&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt; &gt; (10,101,010 samples, 0.02%)</title><rect x="1159.8" y="357" width="0.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1162.80" y="367.5" ></text>
</g>
<g >
<title>page_add_new_anon_rmap (10,101,010 samples, 0.02%)</title><rect x="101.8" y="85" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="104.78" y="95.5" ></text>
</g>
<g >
<title>page_add_new_anon_rmap (10,101,010 samples, 0.02%)</title><rect x="1156.2" y="117" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1159.23" y="127.5" ></text>
</g>
<g >
<title>std::copy&lt;genetic::node*, genetic::node*&gt; (20,202,020 samples, 0.03%)</title><rect x="22.7" y="389" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="25.71" y="399.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, genetic::program const*, genetic::program*&gt; (30,303,030 samples, 0.05%)</title><rect x="1188.0" y="357" width="0.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1191.01" y="367.5" ></text>
</g>
<g >
<title>std::stack&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::push (10,101,010 samples, 0.02%)</title><rect x="1159.4" y="357" width="0.2" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1162.41" y="367.5" ></text>
</g>
<g >
<title>clear_page_orig (50,505,050 samples, 0.08%)</title><rect x="1155.0" y="69" width="1.0" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1158.04" y="79.5" ></text>
</g>
<g >
<title>philox_raisekey (20,202,020 samples, 0.03%)</title><rect x="22.3" y="325" width="0.4" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="25.32" y="335.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;float*, unsigned long&gt; (383,838,380 samples, 0.64%)</title><rect x="1148.9" y="325" width="7.5" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1151.88" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::vector (383,838,380 samples, 0.64%)</title><rect x="94.8" y="341" width="7.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="97.82" y="351.5" ></text>
</g>
<g >
<title>release_pages (10,101,010 samples, 0.02%)</title><rect x="10.0" y="309" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>__sqrtf_finite@GLIBC_2.15 (141,414,140 samples, 0.24%)</title><rect x="248.4" y="341" width="2.8" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="251.38" y="351.5" ></text>
</g>
<g >
<title>std::stack&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::stack&lt;std::deque&lt;int, std::allocator&lt;int&gt; &gt;, void&gt; (20,202,020 samples, 0.03%)</title><rect x="15.6" y="373" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="18.56" y="383.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (10,101,010 samples, 0.02%)</title><rect x="122.6" y="293" width="0.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="125.64" y="303.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;float*, unsigned long, float&gt; (383,838,380 samples, 0.64%)</title><rect x="94.8" y="245" width="7.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="97.82" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_default_initialize (383,838,380 samples, 0.64%)</title><rect x="94.8" y="325" width="7.6" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="97.82" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;int, std::allocator&lt;int&gt; &gt;::~_Deque_base (10,101,010 samples, 0.02%)</title><rect x="16.6" y="341" width="0.2" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="19.56" y="351.5" ></text>
</g>
<g >
<title>PhiloxEngine::operator (111,111,110 samples, 0.19%)</title><rect x="20.5" y="357" width="2.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="23.53" y="367.5" ></text>
</g>
<g >
<title>__mod_lruvec_page_state (20,202,020 samples, 0.03%)</title><rect x="10.4" y="245" width="0.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.40" y="255.5" ></text>
</g>
<g >
<title>philox_random_uint32 (1,070,707,060 samples, 1.78%)</title><rect x="1165.6" y="357" width="21.0" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1168.57" y="367.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (20,202,020 samples, 0.03%)</title><rect x="15.2" y="309" width="0.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="18.16" y="319.5" ></text>
</g>
<g >
<title>clear_page_orig (40,404,040 samples, 0.07%)</title><rect x="100.8" y="37" width="0.8" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="103.78" y="47.5" ></text>
</g>
<g >
<title>__x64_sys_brk (50,505,050 samples, 0.08%)</title><rect x="10.0" y="405" width="1.0" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt; (10,101,010 samples, 0.02%)</title><rect x="17.5" y="373" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="20.55" y="383.5" ></text>
</g>
<g >
<title>std::_Construct&lt;genetic::program, genetic::program const&amp;&gt; (20,202,020 samples, 0.03%)</title><rect x="1188.6" y="309" width="0.4" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="1191.61" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::~vector (10,101,010 samples, 0.02%)</title><rect x="20.1" y="373" width="0.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="23.13" y="383.5" ></text>
</g>
<g >
<title>multiply_high_low (20,202,020 samples, 0.03%)</title><rect x="1157.0" y="293" width="0.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1160.02" y="303.5" ></text>
</g>
<g >
<title>genetic::detail::is_terminal (1,181,818,170 samples, 1.97%)</title><rect x="390.2" y="325" width="23.3" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="393.22" y="335.5" >g..</text>
</g>
<g >
<title>unmap_page_range (40,404,040 samples, 0.07%)</title><rect x="10.2" y="309" width="0.8" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="13.20" y="319.5" ></text>
</g>
<g >
<title>__munmap (10,101,010 samples, 0.02%)</title><rect x="1189.0" y="485" width="0.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1192.01" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::begin (10,101,010 samples, 0.02%)</title><rect x="16.8" y="341" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="19.75" y="351.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;float*, unsigned long&gt; (383,838,380 samples, 0.64%)</title><rect x="1148.9" y="309" width="7.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1151.88" y="319.5" ></text>
</g>
<g >
<title>philox_random_uint32 (50,505,050 samples, 0.08%)</title><rect x="1158.0" y="341" width="1.0" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1161.02" y="351.5" ></text>
</g>
<g >
<title>lru_cache_add_inactive_or_unevictable (10,101,010 samples, 0.02%)</title><rect x="101.6" y="85" width="0.2" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="104.58" y="95.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::push_back (10,101,010 samples, 0.02%)</title><rect x="1159.2" y="357" width="0.2" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1162.21" y="367.5" ></text>
</g>
<g >
<title>__sinf_fma (838,383,830 samples, 1.40%)</title><rect x="228.9" y="341" width="16.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="231.92" y="351.5" ></text>
</g>
<g >
<title>uniform_int_distribution_custom&lt;int&gt;::operator (50,505,050 samples, 0.08%)</title><rect x="1158.0" y="373" width="1.0" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1161.02" y="383.5" ></text>
</g>
<g >
<title>__libc_start_call_main (59,888,888,290 samples, 99.81%)</title><rect x="11.2" y="485" width="1177.8" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="14.19" y="495.5" >__libc_start_call_main</text>
</g>
<g >
<title>std::__fill_a&lt;float*, float&gt; (10,101,010 samples, 0.02%)</title><rect x="19.9" y="261" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="22.93" y="271.5" ></text>
</g>
<g >
<title>[genetic_benchmark] (10,101,010 samples, 0.02%)</title><rect x="202.7" y="341" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="205.69" y="351.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, genetic::node*, genetic::node*&gt; (10,101,010 samples, 0.02%)</title><rect x="1188.8" y="261" width="0.2" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="1191.81" y="271.5" ></text>
</g>
<g >
<title>PhiloxEngine::operator (1,070,707,060 samples, 1.78%)</title><rect x="1165.6" y="373" width="21.0" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1168.57" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;genetic::program const*, std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt; &gt;, genetic::program*, genetic::program&gt; (20,202,020 samples, 0.03%)</title><rect x="1188.6" y="357" width="0.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1191.61" y="367.5" ></text>
</g>
<g >
<title>std::fill_n&lt;float*, unsigned long, float&gt; (10,101,010 samples, 0.02%)</title><rect x="19.9" y="293" width="0.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="22.93" y="303.5" ></text>
</g>
<g >
<title>genetic::logLoss&lt;float&gt; (1,818,181,800 samples, 3.03%)</title><rect x="66.6" y="357" width="35.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="69.62" y="367.5" >gen..</text>
</g>
<g >
<title>philox_next4 (10,101,010 samples, 0.02%)</title><rect x="1156.4" y="325" width="0.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1159.43" y="335.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;genetic::program const*, std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt; &gt;, genetic::program*&gt; (20,202,020 samples, 0.03%)</title><rect x="1188.6" y="325" width="0.4" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1191.61" y="335.5" ></text>
</g>
<g >
<title>do_user_addr_fault (101,010,100 samples, 0.17%)</title><rect x="100.2" y="165" width="2.0" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="103.19" y="175.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (20,202,020 samples, 0.03%)</title><rect x="1189.4" y="485" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1192.40" y="495.5" ></text>
</g>
<g >
<title>std::forward&lt;int&gt; (10,101,010 samples, 0.02%)</title><rect x="14.4" y="309" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="17.37" y="319.5" ></text>
</g>
<g >
<title>arch_local_irq_enable (10,101,010 samples, 0.02%)</title><rect x="102.0" y="133" width="0.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="104.98" y="143.5" ></text>
</g>
<g >
<title>philox_next4 (10,101,010 samples, 0.02%)</title><rect x="23.5" y="325" width="0.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="26.51" y="335.5" ></text>
</g>
<g >
<title>handle_pte_fault (80,808,080 samples, 0.13%)</title><rect x="1154.8" y="149" width="1.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1157.84" y="159.5" ></text>
</g>
<g >
<title>std::allocator&lt;float&gt;::allocator (10,101,010 samples, 0.02%)</title><rect x="23.3" y="325" width="0.2" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="26.31" y="335.5" ></text>
</g>
<g >
<title>[unknown] (60,606,060 samples, 0.10%)</title><rect x="10.0" y="485" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>genetic::stack&lt;float, 20&gt;::push (30,020,201,720 samples, 50.03%)</title><rect x="463.1" y="341" width="590.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="466.13" y="351.5" >genetic::stack&lt;float, 20&gt;::push</text>
</g>
<g >
<title>__x64_sys_munmap (10,101,010 samples, 0.02%)</title><rect x="1189.0" y="421" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1192.01" y="431.5" ></text>
</g>
<g >
<title>uniform_real_distribution_custom&lt;float&gt;::operator (10,101,010 samples, 0.02%)</title><rect x="23.5" y="373" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="26.51" y="383.5" ></text>
</g>
<g >
<title>genetic::stack&lt;float, 20&gt;::pop (2,111,111,090 samples, 3.52%)</title><rect x="421.6" y="341" width="41.5" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="424.61" y="351.5" >gen..</text>
</g>
<g >
<title>std::stack&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::~stack (10,101,010 samples, 0.02%)</title><rect x="1157.8" y="373" width="0.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1160.82" y="383.5" ></text>
</g>
<g >
<title>__do_munmap (10,101,010 samples, 0.02%)</title><rect x="1189.0" y="389" width="0.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1192.01" y="399.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;float*, unsigned long, float&gt; (383,838,380 samples, 0.64%)</title><rect x="1148.9" y="277" width="7.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1151.88" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_initialize (10,101,010 samples, 0.02%)</title><rect x="19.9" y="357" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="22.93" y="367.5" ></text>
</g>
<g >
<title>genetic::detail::arity (565,656,560 samples, 0.94%)</title><rect x="251.2" y="341" width="11.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="254.16" y="351.5" ></text>
</g>
<g >
<title>get_page_from_freelist (60,606,060 samples, 0.10%)</title><rect x="1155.0" y="85" width="1.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1158.04" y="95.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, genetic::node*, genetic::node*&gt; (20,202,020 samples, 0.03%)</title><rect x="22.7" y="373" width="0.4" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="25.71" y="383.5" ></text>
</g>
<g >
<title>philox_oneround (40,404,040 samples, 0.07%)</title><rect x="1187.0" y="341" width="0.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1190.02" y="351.5" ></text>
</g>
<g >
<title>genetic::node::is_nonterminal (10,101,010 samples, 0.02%)</title><rect x="12.2" y="373" width="0.2" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="15.19" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::vector (10,101,010 samples, 0.02%)</title><rect x="23.3" y="373" width="0.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="26.31" y="383.5" ></text>
</g>
<g >
<title>lru_cache_add (10,101,010 samples, 0.02%)</title><rect x="101.6" y="69" width="0.2" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="104.58" y="79.5" ></text>
</g>
<g >
<title>__mod_lruvec_page_state (10,101,010 samples, 0.02%)</title><rect x="101.8" y="69" width="0.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="104.78" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::vector (383,838,380 samples, 0.64%)</title><rect x="1148.9" y="373" width="7.5" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1151.88" y="383.5" ></text>
</g>
<g >
<title>genetic::crossover (606,060,600 samples, 1.01%)</title><rect x="11.4" y="405" width="11.9" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="14.39" y="415.5" ></text>
</g>
<g >
<title>alloc_pages_vma (40,404,040 samples, 0.07%)</title><rect x="100.8" y="85" width="0.8" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="103.78" y="95.5" ></text>
</g>
<g >
<title>std::__copy_move_a1&lt;false, genetic::program const*, genetic::program*&gt; (30,303,030 samples, 0.05%)</title><rect x="1188.0" y="373" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1191.01" y="383.5" ></text>
</g>
<g >
<title>genetic::node::node (10,101,010 samples, 0.02%)</title><rect x="1157.4" y="373" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1160.42" y="383.5" ></text>
</g>
<g >
<title>run_symbolic_classification (59,888,888,290 samples, 99.81%)</title><rect x="11.2" y="453" width="1177.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="14.19" y="463.5" >run_symbolic_classification</text>
</g>
<g >
<title>handle_pte_fault (70,707,070 samples, 0.12%)</title><rect x="100.6" y="117" width="1.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="103.59" y="127.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;float*, unsigned long, float&gt; (383,838,380 samples, 0.64%)</title><rect x="1148.9" y="341" width="7.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1151.88" y="351.5" ></text>
</g>
<g >
<title>exc_page_fault (111,111,110 samples, 0.19%)</title><rect x="100.2" y="181" width="2.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="103.19" y="191.5" ></text>
</g>
<g >
<title>std::copy&lt;genetic::node*, genetic::node*&gt; (20,202,020 samples, 0.03%)</title><rect x="1188.2" y="309" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1191.21" y="319.5" ></text>
</g>
<g >
<title>alloc_pages_vma (60,606,060 samples, 0.10%)</title><rect x="1155.0" y="117" width="1.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1158.04" y="127.5" ></text>
</g>
<g >
<title>genetic::get_subtree (20,202,020 samples, 0.03%)</title><rect x="1159.6" y="373" width="0.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1162.61" y="383.5" ></text>
</g>
<g >
<title>multiply_high_low (20,202,020 samples, 0.03%)</title><rect x="1187.4" y="325" width="0.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1190.42" y="335.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;float, std::allocator&lt;float&gt; &gt;::_Vector_impl_data::_Vector_impl_data (10,101,010 samples, 0.02%)</title><rect x="19.7" y="325" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="22.73" y="335.5" ></text>
</g>
<g >
<title>genetic::tournament_kernel (1,353,535,340 samples, 2.26%)</title><rect x="1160.0" y="405" width="26.6" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1163.00" y="415.5" >g..</text>
</g>
<g >
<title>handle_mm_fault (80,808,080 samples, 0.13%)</title><rect x="100.6" y="149" width="1.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="103.59" y="159.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (40,404,040 samples, 0.07%)</title><rect x="10.2" y="293" width="0.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="13.20" y="303.5" ></text>
</g>
<g >
<title>free_unref_page_list (10,101,010 samples, 0.02%)</title><rect x="10.0" y="293" width="0.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>philox_next4 (50,505,050 samples, 0.08%)</title><rect x="1186.8" y="357" width="1.0" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1189.82" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::vector (20,202,020 samples, 0.03%)</title><rect x="19.7" y="373" width="0.4" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="22.73" y="383.5" ></text>
</g>
<g >
<title>do_anonymous_page (80,808,080 samples, 0.13%)</title><rect x="1154.8" y="133" width="1.6" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1157.84" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::destroy&lt;int&gt; (10,101,010 samples, 0.02%)</title><rect x="13.0" y="341" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="15.98" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt;, std::allocator&lt;std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt; &gt; &gt;::push_back (20,202,020 samples, 0.03%)</title><rect x="1188.6" y="421" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1191.61" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::operator[] (232,323,230 samples, 0.39%)</title><rect x="90.3" y="341" width="4.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="93.26" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::push_back (80,808,080 samples, 0.13%)</title><rect x="13.2" y="357" width="1.6" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="16.18" y="367.5" ></text>
</g>
<g >
<title>philox_oneround (20,202,020 samples, 0.03%)</title><rect x="1158.2" y="309" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1161.22" y="319.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::_Deque_iterator (10,101,010 samples, 0.02%)</title><rect x="14.6" y="293" width="0.2" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="17.57" y="303.5" ></text>
</g>
<g >
<title>genetic::node::operator= (20,202,020 samples, 0.03%)</title><rect x="22.7" y="309" width="0.4" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="25.71" y="319.5" ></text>
</g>
<g >
<title>unmap_vmas (40,404,040 samples, 0.07%)</title><rect x="10.2" y="341" width="0.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="13.20" y="351.5" ></text>
</g>
<g >
<title>std::stack&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::size (20,202,020 samples, 0.03%)</title><rect x="15.2" y="373" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="18.16" y="383.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (10,101,010 samples, 0.02%)</title><rect x="1154.8" y="101" width="0.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1157.84" y="111.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::size (20,202,020 samples, 0.03%)</title><rect x="15.2" y="357" width="0.4" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="18.16" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_fill_n_a&lt;float*, unsigned long, float, float&gt; (10,101,010 samples, 0.02%)</title><rect x="19.9" y="341" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="22.93" y="351.5" ></text>
</g>
<g >
<title>genetic::compute_metric (4,060,606,020 samples, 6.77%)</title><rect x="23.7" y="373" width="79.9" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="26.71" y="383.5" >genetic::..</text>
</g>
<g >
<title>std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt;::operator[] (20,202,020 samples, 0.03%)</title><rect x="1164.2" y="389" width="0.4" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1167.18" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt; &gt; &gt;::construct&lt;std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt;, std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt; const&amp;&gt; (20,202,020 samples, 0.03%)</title><rect x="1188.6" y="405" width="0.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1191.61" y="415.5" ></text>
</g>
<g >
<title>genetic::subtree_mutation (181,818,180 samples, 0.30%)</title><rect x="1156.4" y="405" width="3.6" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1159.43" y="415.5" ></text>
</g>
<g >
<title>genetic::node::node (10,101,010 samples, 0.02%)</title><rect x="17.9" y="373" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="20.95" y="383.5" ></text>
</g>
<g >
<title>multiply_high_low (202,020,200 samples, 0.34%)</title><rect x="1177.9" y="309" width="4.0" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1180.88" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;float&gt;::new_allocator (10,101,010 samples, 0.02%)</title><rect x="23.3" y="309" width="0.2" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="26.31" y="319.5" ></text>
</g>
<g >
<title>philox_next4 (90,909,090 samples, 0.15%)</title><rect x="20.5" y="325" width="1.8" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="23.53" y="335.5" ></text>
</g>
<g >
<title>philox_next4 (50,505,050 samples, 0.08%)</title><rect x="1158.0" y="325" width="1.0" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1161.02" y="335.5" ></text>
</g>
<g >
<title>PhiloxEngine::operator (10,101,010 samples, 0.02%)</title><rect x="1164.0" y="389" width="0.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1166.98" y="399.5" ></text>
</g>
<g >
<title>page_remove_rmap (20,202,020 samples, 0.03%)</title><rect x="10.4" y="261" width="0.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="13.40" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::end (20,202,020 samples, 0.03%)</title><rect x="16.0" y="341" width="0.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="18.96" y="351.5" ></text>
</g>
<g >
<title>uniform_int_distribution_custom&lt;int&gt;::operator (1,121,212,110 samples, 1.87%)</title><rect x="1164.6" y="389" width="22.0" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1167.57" y="399.5" >u..</text>
</g>
<g >
<title>__do_sys_brk (50,505,050 samples, 0.08%)</title><rect x="10.0" y="389" width="1.0" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>std::__copy_move_a1&lt;false, genetic::node*, genetic::node*&gt; (20,202,020 samples, 0.03%)</title><rect x="1188.2" y="277" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1191.21" y="287.5" ></text>
</g>
<g >
<title>genetic::find_batched_fitness (57,595,959,020 samples, 95.99%)</title><rect x="23.7" y="389" width="1132.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="26.71" y="399.5" >genetic::find_batched_fitness</text>
</g>
<g >
<title>std::__fill_n_a&lt;float*, unsigned long, float&gt; (10,101,010 samples, 0.02%)</title><rect x="19.9" y="277" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="22.93" y="287.5" ></text>
</g>
<g >
<title>philox_next4 (999,999,990 samples, 1.67%)</title><rect x="1165.6" y="341" width="19.6" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1168.57" y="351.5" ></text>
</g>
<g >
<title>std::fill_n&lt;float*, unsigned long, float&gt; (383,838,380 samples, 0.64%)</title><rect x="94.8" y="261" width="7.6" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="97.82" y="271.5" ></text>
</g>
<g >
<title>genetic::get_depth (20,202,020 samples, 0.03%)</title><rect x="1159.2" y="373" width="0.4" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1162.21" y="383.5" ></text>
</g>
<g >
<title>std::advance&lt;__gnu_cxx::__normal_iterator&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt;, long&gt; (10,101,010 samples, 0.02%)</title><rect x="18.7" y="357" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="21.74" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::operator[] (10,101,010 samples, 0.02%)</title><rect x="19.5" y="373" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="22.54" y="383.5" ></text>
</g>
<g >
<title>genetic::detail::is_nonterminal (10,101,010 samples, 0.02%)</title><rect x="12.2" y="357" width="0.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="15.19" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,101,010 samples, 0.02%)</title><rect x="1189.0" y="469" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.01" y="479.5" ></text>
</g>
<g >
<title>philox_skip (20,202,020 samples, 0.03%)</title><rect x="1184.8" y="325" width="0.4" height="15.0" fill="rgb(250,209,49)" rx="2" ry="2" />
<text  x="1187.84" y="335.5" ></text>
</g>
<g >
<title>std::__fill_a1&lt;float*, float&gt; (10,101,010 samples, 0.02%)</title><rect x="19.9" y="245" width="0.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="22.93" y="255.5" ></text>
</g>
<g >
<title>free_unref_page_list (10,101,010 samples, 0.02%)</title><rect x="10.8" y="213" width="0.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="13.79" y="223.5" ></text>
</g>
<g >
<title>__sqrtf (151,515,150 samples, 0.25%)</title><rect x="245.4" y="341" width="3.0" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="248.40" y="351.5" ></text>
</g>
<g >
<title>PhiloxEngine::operator (40,404,040 samples, 0.07%)</title><rect x="1156.6" y="357" width="0.8" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1159.63" y="367.5" ></text>
</g>
<g >
<title>genetic::node::operator= (20,202,020 samples, 0.03%)</title><rect x="1188.2" y="229" width="0.4" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1191.21" y="239.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::_Deque_iterator (10,101,010 samples, 0.02%)</title><rect x="16.8" y="325" width="0.2" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="19.75" y="335.5" ></text>
</g>
<g >
<title>philox_raisekey (10,101,010 samples, 0.02%)</title><rect x="1187.8" y="357" width="0.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1190.81" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::_Deque_iterator (20,202,020 samples, 0.03%)</title><rect x="16.0" y="325" width="0.4" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="18.96" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt;::operator+= (10,101,010 samples, 0.02%)</title><rect x="18.5" y="325" width="0.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="21.54" y="335.5" ></text>
</g>
<g >
<title>genetic::set_batched_fitness (57,595,959,020 samples, 95.99%)</title><rect x="23.7" y="405" width="1132.7" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="26.71" y="415.5" >genetic::set_batched_fitness</text>
</g>
<g >
<title>philox_random_uint32 (40,404,040 samples, 0.07%)</title><rect x="1156.6" y="341" width="0.8" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1159.63" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt;::base (10,101,010 samples, 0.02%)</title><rect x="19.3" y="357" width="0.2" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="22.34" y="367.5" ></text>
</g>
<g >
<title>free_unref_page_list (10,101,010 samples, 0.02%)</title><rect x="1189.0" y="309" width="0.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1192.01" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt; (10,101,010 samples, 0.02%)</title><rect x="1159.4" y="325" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1162.41" y="335.5" ></text>
</g>
<g >
<title>multiply_high_low (10,101,010 samples, 0.02%)</title><rect x="1186.8" y="341" width="0.2" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1189.82" y="351.5" ></text>
</g>
<g >
<title>release_pages (10,101,010 samples, 0.02%)</title><rect x="101.6" y="37" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="104.58" y="47.5" ></text>
</g>
<g >
<title>genetic::get_subtree (20,202,020 samples, 0.03%)</title><rect x="23.3" y="389" width="0.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="26.31" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::back (20,202,020 samples, 0.03%)</title><rect x="16.0" y="357" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="18.96" y="367.5" ></text>
</g>
<g >
<title>main (59,888,888,290 samples, 99.81%)</title><rect x="11.2" y="469" width="1177.8" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="14.19" y="479.5" >main</text>
</g>
<g >
<title>uniform_real_distribution_custom&lt;float&gt;::operator (70,707,070 samples, 0.12%)</title><rect x="1186.6" y="405" width="1.4" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1189.62" y="415.5" ></text>
</g>
<g >
<title>std::__fill_a1&lt;float*, float&gt; (383,838,380 samples, 0.64%)</title><rect x="1148.9" y="245" width="7.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1151.88" y="255.5" ></text>
</g>
<g >
<title>philox_raisekey (20,202,020 samples, 0.03%)</title><rect x="1158.6" y="309" width="0.4" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1161.61" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt; (70,707,070 samples, 0.12%)</title><rect x="13.4" y="341" width="1.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="16.38" y="351.5" ></text>
</g>
<g >
<title>philox_oneround (30,303,030 samples, 0.05%)</title><rect x="1156.8" y="309" width="0.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1159.82" y="319.5" ></text>
</g>
<g >
<title>_int_free (10,101,010 samples, 0.02%)</title><rect x="1189.2" y="485" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1192.21" y="495.5" ></text>
</g>
<g >
<title>multiply_high_low (20,202,020 samples, 0.03%)</title><rect x="21.9" y="293" width="0.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="24.92" y="303.5" ></text>
</g>
<g >
<title>__brk (50,505,050 samples, 0.08%)</title><rect x="10.0" y="469" width="1.0" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt;::operator* (10,101,010 samples, 0.02%)</title><rect x="17.4" y="373" width="0.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="20.35" y="383.5" ></text>
</g>
<g >
<title>handle_mm_fault (90,909,090 samples, 0.15%)</title><rect x="1154.6" y="181" width="1.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1157.64" y="191.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;genetic::program const*, std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;genetic::program*, std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt; &gt; &gt; (30,303,030 samples, 0.05%)</title><rect x="1188.0" y="389" width="0.6" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="1191.01" y="399.5" ></text>
</g>
<g >
<title>std::__copy_move_a1&lt;false, genetic::node*, genetic::node*&gt; (20,202,020 samples, 0.03%)</title><rect x="22.7" y="357" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="25.71" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt; (10,101,010 samples, 0.02%)</title><rect x="1159.0" y="373" width="0.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1162.01" y="383.5" ></text>
</g>
<g >
<title>genetic::detail::evaluate_node (5,959,595,900 samples, 9.93%)</title><rect x="262.3" y="341" width="117.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="265.29" y="351.5" >genetic::detai..</text>
</g>
<g >
<title>genetic::get_subtree (292,929,290 samples, 0.49%)</title><rect x="17.0" y="389" width="5.7" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="19.95" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::back (10,101,010 samples, 0.02%)</title><rect x="14.6" y="325" width="0.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="17.57" y="335.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (50,505,050 samples, 0.08%)</title><rect x="10.0" y="453" width="1.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>genetic::get_depth (272,727,270 samples, 0.45%)</title><rect x="11.6" y="389" width="5.4" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="14.59" y="399.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (10,101,010 samples, 0.02%)</title><rect x="122.6" y="277" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="125.64" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt; (10,101,010 samples, 0.02%)</title><rect x="1157.6" y="341" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1160.62" y="351.5" ></text>
</g>
<g >
<title>genetic::program::program (20,202,020 samples, 0.03%)</title><rect x="1188.6" y="293" width="0.4" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="1191.61" y="303.5" ></text>
</g>
<g >
<title>genetic::detail::is_nonterminal (1,727,272,710 samples, 2.88%)</title><rect x="379.5" y="341" width="34.0" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="382.49" y="351.5" >ge..</text>
</g>
<g >
<title>free_pages_and_swap_cache (10,101,010 samples, 0.02%)</title><rect x="1189.0" y="341" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1192.01" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (50,505,050 samples, 0.08%)</title><rect x="10.0" y="437" width="1.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>__handle_mm_fault (70,707,070 samples, 0.12%)</title><rect x="100.6" y="133" width="1.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="103.59" y="143.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (10,101,010 samples, 0.02%)</title><rect x="10.8" y="261" width="0.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="13.79" y="271.5" ></text>
</g>
<g >
<title>__vm_munmap (10,101,010 samples, 0.02%)</title><rect x="1189.0" y="405" width="0.2" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="1192.01" y="415.5" ></text>
</g>
<g >
<title>philox_random_uint32 (10,101,010 samples, 0.02%)</title><rect x="1156.4" y="341" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1159.43" y="351.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;genetic::node*, genetic::node*&gt; (20,202,020 samples, 0.03%)</title><rect x="22.7" y="325" width="0.4" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="25.71" y="335.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;genetic::node*, genetic::node*&gt; (20,202,020 samples, 0.03%)</title><rect x="1188.2" y="245" width="0.4" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1191.21" y="255.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;float*, unsigned long, float&gt; (383,838,380 samples, 0.64%)</title><rect x="94.8" y="309" width="7.6" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="97.82" y="319.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (111,111,110 samples, 0.19%)</title><rect x="1154.2" y="229" width="2.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1157.24" y="239.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, genetic::node*, genetic::node*&gt; (20,202,020 samples, 0.03%)</title><rect x="1188.2" y="261" width="0.4" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="1191.21" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt;::vector (20,202,020 samples, 0.03%)</title><rect x="1188.6" y="373" width="0.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1191.61" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;float, std::allocator&lt;float&gt; &gt;::~_Vector_base (10,101,010 samples, 0.02%)</title><rect x="20.1" y="357" width="0.2" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="23.13" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate_node (10,101,010 samples, 0.02%)</title><rect x="15.6" y="293" width="0.2" height="15.0" fill="rgb(246,193,46)" rx="2" ry="2" />
<text  x="18.56" y="303.5" ></text>
</g>
<g >
<title>multiply_high_low (10,101,010 samples, 0.02%)</title><rect x="1169.9" y="325" width="0.2" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1172.94" y="335.5" ></text>
</g>
<g >
<title>genetic::detail::is_terminal (414,141,410 samples, 0.69%)</title><rect x="413.5" y="341" width="8.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="416.46" y="351.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (10,101,010 samples, 0.02%)</title><rect x="10.0" y="341" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>genetic::program::operator= (30,303,030 samples, 0.05%)</title><rect x="1188.0" y="325" width="0.6" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1191.01" y="335.5" ></text>
</g>
<g >
<title>x64_sys_call (50,505,050 samples, 0.08%)</title><rect x="10.0" y="421" width="1.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>bernoulli_distribution_custom&lt;double&gt;::operator (10,101,010 samples, 0.02%)</title><rect x="1156.4" y="373" width="0.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1159.43" y="383.5" ></text>
</g>
<g >
<title>PhiloxEngine::operator (10,101,010 samples, 0.02%)</title><rect x="23.5" y="357" width="0.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="26.51" y="367.5" ></text>
</g>
<g >
<title>genetic_benchma (59,999,999,400 samples, 100.00%)</title><rect x="10.0" y="501" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >genetic_benchma</text>
</g>
<g >
<title>std::_Vector_base&lt;float, std::allocator&lt;float&gt; &gt;::_M_deallocate (10,101,010 samples, 0.02%)</title><rect x="20.1" y="341" width="0.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="23.13" y="351.5" ></text>
</g>
<g >
<title>__mod_lruvec_page_state (10,101,010 samples, 0.02%)</title><rect x="1156.2" y="101" width="0.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1159.23" y="111.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;float, std::allocator&lt;float&gt; &gt;::_Vector_impl::_Vector_impl (10,101,010 samples, 0.02%)</title><rect x="19.7" y="341" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="22.73" y="351.5" ></text>
</g>
<g >
<title>down_read_trylock (10,101,010 samples, 0.02%)</title><rect x="102.2" y="165" width="0.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="105.18" y="175.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (10,101,010 samples, 0.02%)</title><rect x="1189.0" y="357" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1192.01" y="367.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;genetic::program const*, genetic::program*&gt; (30,303,030 samples, 0.05%)</title><rect x="1188.0" y="341" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1191.01" y="351.5" ></text>
</g>
<g >
<title>philox_raisekey (151,515,150 samples, 0.25%)</title><rect x="1181.9" y="325" width="2.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1184.86" y="335.5" ></text>
</g>
<g >
<title>genetic::stack&lt;float, 20&gt;::push (272,727,270 samples, 0.45%)</title><rect x="1142.9" y="357" width="5.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1145.92" y="367.5" ></text>
</g>
<g >
<title>std::stack&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::push (10,101,010 samples, 0.02%)</title><rect x="1157.6" y="373" width="0.2" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1160.62" y="383.5" ></text>
</g>
<g >
<title>genetic::stack&lt;float, 20&gt;::pop (363,636,360 samples, 0.61%)</title><rect x="1135.8" y="357" width="7.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1138.77" y="367.5" ></text>
</g>
<g >
<title>do_user_addr_fault (111,111,110 samples, 0.19%)</title><rect x="1154.2" y="197" width="2.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1157.24" y="207.5" ></text>
</g>
<g >
<title>genetic::detail::is_nonterminal (525,252,520 samples, 0.88%)</title><rect x="112.5" y="357" width="10.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="115.51" y="367.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (111,111,110 samples, 0.19%)</title><rect x="100.2" y="197" width="2.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="103.19" y="207.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::~deque (10,101,010 samples, 0.02%)</title><rect x="1157.8" y="357" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1160.82" y="367.5" ></text>
</g>
<g >
<title>philox_random_uint32 (111,111,110 samples, 0.19%)</title><rect x="20.5" y="341" width="2.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="23.53" y="351.5" ></text>
</g>
<g >
<title>std::fill_n&lt;float*, unsigned long, float&gt; (383,838,380 samples, 0.64%)</title><rect x="1148.9" y="293" width="7.5" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1151.88" y="303.5" ></text>
</g>
<g >
<title>std::stack&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::pop (10,101,010 samples, 0.02%)</title><rect x="23.1" y="389" width="0.2" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="26.11" y="399.5" ></text>
</g>
<g >
<title>genetic::execute (53,151,514,620 samples, 88.59%)</title><rect x="103.6" y="373" width="1045.3" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="106.57" y="383.5" >genetic::execute</text>
</g>
<g >
<title>__do_munmap (50,505,050 samples, 0.08%)</title><rect x="10.0" y="373" width="1.0" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>release_pages (10,101,010 samples, 0.02%)</title><rect x="1189.0" y="325" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1192.01" y="335.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;genetic::program const*, std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt; &gt;, genetic::program*&gt; (20,202,020 samples, 0.03%)</title><rect x="1188.6" y="341" width="0.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1191.61" y="351.5" ></text>
</g>
<g >
<title>genetic::build_program (131,313,130 samples, 0.22%)</title><rect x="1156.4" y="389" width="2.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1159.43" y="399.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (10,101,010 samples, 0.02%)</title><rect x="10.8" y="245" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="13.79" y="255.5" ></text>
</g>
<g >
<title>multiply_high_low (20,202,020 samples, 0.03%)</title><rect x="1158.2" y="293" width="0.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1161.22" y="303.5" ></text>
</g>
<g >
<title>std::stack&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::pop (40,404,040 samples, 0.07%)</title><rect x="12.4" y="373" width="0.8" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="15.38" y="383.5" ></text>
</g>
<g >
<title>__handle_mm_fault (90,909,090 samples, 0.15%)</title><rect x="1154.6" y="165" width="1.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1157.64" y="175.5" ></text>
</g>
</g>
</svg>
